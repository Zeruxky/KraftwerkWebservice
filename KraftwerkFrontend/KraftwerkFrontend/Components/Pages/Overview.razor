@page "/overview"
@using Microsoft.AspNetCore.SignalR.Client
@using Vizor.ECharts;
@using Color = Vizor.ECharts.Color
@using Label = Vizor.ECharts.Label
@using Tooltip = Vizor.ECharts.Tooltip
@using KraftwerkFrontend.Components.Shared
@using Blazorise.DeepCloner
@rendermode InteractiveServer


<PageTitle>Overview</PageTitle>
<div class="d-flex align-content-center justify-content-center h-100 container">
    <div class="col h-100 w-100">
        <div class="row w-100 h-50">
            <ConsumptionChart Time="@Time" ConsumptionList="@expectedConsumption"></ConsumptionChart>
            <MarketShareChart MarketShares="@marketShares"></MarketShareChart>
        </div>
        <div class="row align-content-center w-100 h-50 d-flex">
            <ProductionChart ProductionList="@productionList"></ProductionChart>
        </div>
    </div>
</div>


@code {
    private double[][] expectedConsumption = new double[24][];
    private readonly List<(DateTime, double)> productionList = [];

    private readonly Dictionary<string, (string, double)> marketShares = new();

    [Inject]
    public required HubConnection Hub { get; init; }
    
    [Inject]
    public required ILogger<Overview> Logger { get; init; }
    
    private int Time { get; set; }

    private string? Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await this.ConnectToHubAsync();
        await Hub.SendAsync("GetExpectedConsumeAsync");
        Hub.On<Dictionary<int, double>>(
            "ReceiveExpectedConsumeAsync",
            async message =>
            {
                var newList = new double[24][];
                var values = message.Values.ToArray();
                for (var i = 0; i < message.Count(); i++)
                {
                    newList[i] = [i, values[i],];
                }

                expectedConsumption = newList;
                await InvokeAsync(StateHasChanged);
            });
        Hub.On<int>(
            "ReceiveTimeAsync",
            async message =>
            {
                Time = message;
                await InvokeAsync(StateHasChanged);
            });
        Hub.On<double>(
            "ReceiveEnergyAsync",
            async message =>
            {
                if (productionList.Count >= 9)
                {
                    productionList.RemoveAt(0);
                }

                productionList.Add((DateTime.Now, message / 10000.0));
                await InvokeAsync(StateHasChanged);
            });
        Hub.On<Dictionary<string, MarketShare>>(
            "ReceivePieChartDataAsync",
            async message =>
            {
                marketShares.Clear();
                message.ToList().ForEach(x => { marketShares[x.Key] = (x.Value.Name, x.Value.Value); });
                await InvokeAsync(StateHasChanged);
            });
    }
    
    private async Task ConnectToHubAsync()
    {
        while (this.Hub.State == HubConnectionState.Disconnected)
        {
            try
            {
                await Hub.StartAsync();
            }
            catch (Exception e)
            {
                this.Logger.LogError(e, "Server not running or not possible to connect...");
                await Task.Delay(1000);
            }
        }
    }

    public record MarketShare
    {
        public string Name { get; init; } = string.Empty;

        public double Value { get; init; }
    }
}