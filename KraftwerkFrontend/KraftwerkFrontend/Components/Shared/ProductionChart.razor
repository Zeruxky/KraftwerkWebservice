@using Color = Vizor.ECharts.Color
<Vizor.ECharts.EChart CssClass="abs h-100 w-100" @ref="@chart" Options="@options"/>

@code {
    [Parameter]
    public List<(DateTime, double)> ProductionList { get; set; } = [];

    private Vizor.ECharts.EChart? chart;

    private ChartOptions options = new() { Title = new Title() { Show = true, Left = "center", Text = "Production", TextStyle = new TextStyle() { Color = Color.FromRGB(255, 255, 255), } }, YAxis = new YAxis() { Max = 2.5, Min = -2.5, Type = AxisType.Value, AxisLabel = new AxisLabel() { Formatter = new StringOrFunction(new JavascriptFunction("val => `${val+50}`")), } }, XAxis = new XAxis() { Offset = 50, AxisLine = new AxisLine() { OnZero = false, }, Type = AxisType.Time, BoundaryGap = false, Show = false, }, Series = new List<ISeries>() { new LineSeries() { Smooth = true, ShowSymbol = false, LineStyle = new LineStyle() { Color = Color.FromRGB(166, 74, 94) }, AreaStyle = new AreaStyle() { Color = [Color.FromRGB(166, 74, 94)], }, } }, Animation = false, };

    protected override async Task OnInitializedAsync()
    {
        if (this.options.Series?[0] is LineSeries lineSeries)
        {
            lineSeries.Data = ProductionList.Select(item => new SeriesData<DateTime, double>(item.Item1, item.Item2));
        }

        if (this.chart is null)
        {
            return;
        }

        await this.chart.UpdateAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (this.options.Series?[0] is LineSeries lineSeries)
        {
            lineSeries.Data = ProductionList.Select(item => new SeriesData<DateTime, double>(item.Item1, item.Item2));
        }

        if (this.chart is null)
        {
            return;
        }

        await this.chart.UpdateAsync();
    }
}